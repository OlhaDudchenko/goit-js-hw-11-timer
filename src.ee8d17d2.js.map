{"version":3,"sources":["index.js"],"names":["days","document","querySelector","hours","mins","secs","timeContainer","timer","start","startTime","Date","interval","setInterval","currentTime","now","time","innerHTML","pad","Math","floor","clearInterval","value","String","padStart","console","log"],"mappings":";;;AAyEA,aAzEA,QAAA,oBACA,MAAMA,EAAOC,SAASC,cAAc,uBAC9BC,EAAQF,SAASC,cAAc,wBAC/BE,EAAOH,SAASC,cAAc,uBAC9BG,EAAOJ,SAASC,cAAc,uBAC9BI,EAAgBL,SAASC,cAAc,UASvCK,EAAQ,CACZC,QAEQC,MAAAA,EAAY,IAAIC,KAAK,wBACrBC,EAASC,YAAY,KACnBC,MAAAA,EAAcH,KAAKI,MACnBC,EAAON,EAAYI,EACzBb,EAAKgB,UAAYC,EAAIC,KAAKC,MAAMJ,EAAQ,QAEvCZ,EAAMa,UAAYC,EAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAEnEX,EAAKY,UAAWC,EAAKC,KAAKC,MAAOJ,EAAQ,KAAoB,MAC9DV,EAAKW,UAAYC,EAAIC,KAAKC,MAAOJ,EAAQ,IAAc,MAElDA,EAAO,IACVK,cAAcT,GACdL,EAAcU,UAAY,iBAK3B,OAUP,SAASC,EAAII,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAE,KANlCC,QAAQC,IAAIlB,EAAMC","file":"src.ee8d17d2.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\nconst days = document.querySelector('[data-value=\"days\"]');\nconst hours = document.querySelector('[data-value=\"hours\"]')\nconst mins = document.querySelector('[data-value=\"mins\"]');\nconst secs = document.querySelector('[data-value=\"secs\"]');\nconst timeContainer = document.querySelector('.timer');\n\n\n// new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Jul 17, 2019'),\n// });\n\n\nconst timer = {\n  start() {\n    \n    const startTime = new Date(\"Sep 5, 2021 15:37:25\");\n    const interval=setInterval(() => {\n      const currentTime = Date.now();\n      const time = startTime - currentTime;\n      days.innerHTML = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n       hours.innerHTML = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n      \n       mins.innerHTML =pad( Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      secs.innerHTML = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n       if (time < 0) {\n        clearInterval(interval);\n        timeContainer.innerHTML = \"TIME EXPIRED\";\n    }\n    \n\n\n    }, 1000);\n  },\n};\n\n\nconsole.log(timer.start());\n\n\n\n\nfunction pad(value) {\n  return String(value).padStart(2,'0');\n  \n}\n\n// /*\n//  * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n//  * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n//  */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n// /*\n//  * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n//  * остатка % и делим его на количество миллисекунд в одном часе\n//  * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n//  */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n// /*\n//  * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n//  * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n//  */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n// /*\n//  * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n//  * миллисекунд в одной секунде (1000)\n//  */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n"]}